# Boilerplate code generated by OVITO Pro 3.10.1
import matplotlib.pyplot as plt
import numpy as np
from ovito.data import *
from ovito.io import *
from ovito.modifiers import *
from ovito.pipeline import *


def main():
    # Load the data file:
    pipeline = import_file("channel.data", atom_style="full")

    # Load trajectory:
    mod = LoadTrajectoryModifier()
    pipeline.modifiers.append(mod)
    mod.source.load("traj_lin.dat", multiple_frames=True)

    # Wrap at periodic boundaries:
    pipeline.modifiers.append(WrapPeriodicImagesModifier())

    # Select type:
    pipeline.modifiers.append(SelectTypeModifier(types={1, 2}))

    # Set up binning along z-axis
    bin_count = 50
    binning = SpatialBinningModifier()
    binning.property = "Mass"
    binning.direction = SpatialBinningModifier.Direction.Z
    binning.only_selected = True
    binning.bin_count = bin_count
    pipeline.modifiers.append(binning)

    # Initialise arrays
    num_frames = pipeline.source.num_frames
    accumulated_mass = None
    z_centers = None

    for frame in range(num_frames):
        data = pipeline.compute(frame)
        table = data.tables["binning"]
        mass_values = table["Mass"]

        if accumulated_mass is None:
            accumulated_mass = np.array(mass_values)

            # Compute bin centers from simulation cell
            cell = data.cell
            zmin = 0.0  # origin is at 0
            zmax = cell.matrix[2, 2]  # height of the box in z-direction
            z_edges = np.linspace(zmin, zmax, bin_count + 1)
            z_centers = 0.5 * (z_edges[:-1] + z_edges[1:])
        else:
            accumulated_mass += mass_values

    # Average over trajectory
    average_mass = accumulated_mass / num_frames

    # Plotting
    plt.figure(figsize=(4, 4))
    plt.plot(z_centers, average_mass)
    plt.xlabel("z-position")
    plt.ylabel("Average mass")
    plt.title("Mass profile along z-axis")
    plt.tight_layout()
    plt.savefig("mass_profile.png")


if __name__ == "__main__":
    main()
